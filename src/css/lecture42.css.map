{"version":3,"sourceRoot":"","sources":["lecture42.scss"],"names":[],"mappings":";AAAA;AAwBA;AACA;EACE;EAEA;;;AAIF;AAcA;AACA;EAEE;;;AAIF;EACE;EAEA;EACA,eAGG;EACH","sourcesContent":["/* ユーザー定義関数 */\n@use 'sass:math'; // div, round\n@use 'sass:list'; // length\n@use 'sass:meta'; // type-of\n\n// 開発者オリジナル機能の関数\n// @function 関数名(引数:初期値) {処理}\n// 戻り値は@return **で定義\n\n// 計算関数\n@function sum($value1: 50px, $value2: 10px) {\n  // 初期値\n  // $value1: 50px\n  // $value2: 10px\n\n  // 引数が両方数値なら計算、それ以外は警告\n  @if (meta.type-of($value1) == number) and (meta.type-of($value2) == number) {\n    @return $value1 + $value2;\n  } @else {\n    @warn \"警告：引数の#{$value1}もしくは#{$value2}に数値以外が渡されています\"; // 警告だけして処理を続ける\n    @error \"エラー：引数の#{$value1}もしくは#{$value2}に数値以外が渡されています\"; // エラー発生につき処理停止\n  }\n}\n\n/* 関数sumを使用 */\n.sum {\n  width: sum(100px, 200px);\n  // width: sum('100px', 200px); // warn呼び出し実験\n  height: sum($value2: 200px);\n  // $value1:初期値, $value2:指定値\n}\n\n/* モジュール関数との併用 */\n// 配列を引数に取り、配列の要素の中身の平均を算出する関数aveを定義\n@function ave($arry) {\n  $sum: 0; // 合計値の初期値\n  // 配列の要素の数だけループして要素の合計を取得\n  @each $val in $arry {\n    $sum: $sum + $val; // 現時点の合計値に要素の値を加算\n    @debug $sum; // この時点での合計値を確認\n  }\n  // 配列の中身の合計を、配列の要素数で割る\n  // ※平均値が整数でない場合、四捨五入される\n  @return math.round(math.div($sum, list.length($arry)));\n}\n\n/* 関数aveを使用 */\n.ave {\n  $marginList: 10, 25, 14, 34;\n  margin: ave($marginList);\n}\n\n// 自作関数名がモジュール関数で既存か確認する\n.exist {\n  margin: 0;\n  // cssではなくsassの表現形式を優先\n  content: meta.function-exists(ave); /* 自作ave関数 */\n  content: meta.function-exists(\n    length,\n    list\n  ); /* listモジュール内のlength関数 */\n  content: meta.function-exists(func); /* func関数 */\n}\n"],"file":"lecture42.css"}