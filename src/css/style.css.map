{"version":3,"sourceRoot":"","sources":["_variables.scss","_mixins.scss","_base.scss","_top.scss","_utility.scss"],"names":[],"mappings":";AAAA;ACAA;ACMA;AACA;EACE;EACA;;;AAGF;AACA;EACE;EACA;;;AAGF;AAAA;EAEE;;;AAEF;EACE;EACA;;;AAEF;EACE;;;AAGF;AAEA;EACE;EACA;EACA;EACA;EACA;;AAEA;EACE;EACA;EACA;EDzBF;;AC4BA;EAEE;;;AAIJ;EACE;EAEA;EACA;;AACA;EACE;EAEA;EACA;;AACA;EACE;EACA;EACA;EACA;;AACA;EACE;EACA;;AACA;EAEE;;;AAOV;EACE;EACA;EACA;;AAEA;EACE;EACA;EACA;;AAEF;EACE;EACA;EACA;;AAEF;EAEE;EACA;EACA;;AACA;EACE;;AAGJ;EAEE;;AAEA;EACE;EACA;EACA;EACA;;AAGF;EACE;EACA;EACA;;AAOA;EACE;;AAGF;EACE;EACA;;AAEA;EACE;;AAVN;ED3FA;EAIF;;AACA;EAEE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGE;;;AC0FN;EACE;EACA;EACA;;;AC/IF;AAQE;EACE;EACA;;AFNF;EAEE;EACA;EACA;;AEKA;EACE;EACA;;AAGF;EACE;;AAGF;EACE;EACA;;AAGF;EACE;EACA;;AAEF;EACE;;AAEF;EACE;EACA;EACA;EACA;EACA;EACA;EFPF;EAEF;;AACA;EAEE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAKE;;;AGpDN;AASA;AAMI;EACE;;;AAEF;EACE;;;AAJF;EACE;;;AAEF;EACE;;;AAJF;EACE;;;AAEF;EACE;;;AAJF;EACE;;;AAEF;EACE;;;AAJF;EACE;;;AAEF;EACE;;;AAJF;EACE;;;AAEF;EACE;;;AAaN","sourcesContent":["/* 変数を定義専用パーシャル */\n\n// $GNaviHeight: 60px; // グローバルナビの高さ ⇒ $gnaviマップに統合\n// $GNaviButtonWidth: 150px; // グローバルナビの幅 ⇒ $gnaviマップに統合\n// $ContentsWidth: 1024px; // .contentsの幅 ⇒ $widthマップに統合\n// $SideAreaWidth: 300px ; // .sideAreaの幅 ⇒ $widthマップに統合\n// $AreaPadding: 20px; // .**_areaのpadding ⇒ $paddingマップに統合\n\n$gnavi: (\n  height: 60px,\n  buttonWidth: 150px,\n);\n\n// 「幅」属性をまとめる⇒map（連想配列）\n$width: (\n  contents: 1024px,\n  // .contentsの幅\n  sideArea: 300px,\n  // .sideAreaの幅\n);\n\n// padding属性まとめmap\n$padding: (\n  area: 20px,\n  headerTop: 40px,\n  headerBottom: 20px,\n);\n\n// 使用する各種ファイルのパスを定義\n$path: (\n  img: '../../src/img/',\n  //imgファイルのパス（_variables.scssの位置から見た相対パス）,\n);\n","/* ミックスイン専用のパーシャル */\n\n// float解除のミックスイン\n@mixin clearfix {\n  &::after {\n    // 呼び出し元（親セレクタ）に対して適用\n    content: '';\n    display: block;\n    clear: both;\n  }\n}\n\n// テキスト影のミックスイン\n// 引数\n// $color：色（初期値#000）\n// $alpha：透明度（初期値0.5）\n@mixin textShadow($color: #000, $alpha: 0.5) {\n  text-shadow: 1px 1px 2px rgba($color, $alpha);\n}\n\n// オーバーカーソル中のリンクに矢印を表示する\n// 引数で書き出し先の左右を制御する（デフォ：right）\n// 引数で表示色を制御する（デフォ：#aaa）\n@mixin linkArrow($side: 'right', $color: #aaa) {\n  // 想定外引数への警告\n  @if ($side != 'right' and $side != 'left') {\n    @warn \"位置指定の引数は'right'か'left'のみ指定可能\";\n  }\n\n  // 書き出し先の分岐\n  @if ($side == 'right') {\n    padding-right: 20px;\n  } @else if ($side == 'left') {\n    padding-left: 20px;\n  }\n  position: relative; // position: absolute;適用準備\n  &::after {\n    // 呼び出し元（親セレクタ）に対して適用\n    content: '';\n    display: block;\n    width: 5px;\n    height: 5px;\n    position: absolute;\n    top: 50%;\n    margin-top: -2.5px;\n    border-top: 1px solid $color;\n    border-right: 1px solid $color;\n    transform: rotate(45deg); // 45度回転\n    // 書き出し先の分岐\n    @if ($side == 'right') {\n      right: 10px;\n    } @else if ($side == 'left') {\n      left: 10px;\n    }\n  }\n}\n","@use 'variables'; // 定義した変数集を読み込む\n@use 'mixins'; // 定義したミックスイン集を読み込む\n@use 'sass:map'; // variablesに定義したmapを利用するため\n\n// 基本的なスタイルを記述していくscss\n\n/* 全タグの基本設定（初期化） */\n* {\n  margin: 0;\n  padding: 0;\n}\n\n/* 大まかな基本設定 */\nbody {\n  font-size: 15px;\n  color: #333;\n}\n\np,\nli {\n  line-height: 2rem;\n}\na {\n  text-decoration: none;\n  color: #333;\n}\nli {\n  list-style: none;\n}\n\n/* 個別要素 */\n// ネスト構造⇒HTML内のある程度まとまった親子関係で書くと楽\n.header {\n  height: 200px;\n  width: 100%;\n  background: url('#{map.get(variables.$path, img)}header_001.jpg') no-repeat center top;\n  background-size: cover;\n  padding-top: map.get(variables.$padding, headerTop);\n\n  .title {\n    width: map.get(variables.$width, contents);\n    margin: 0 auto;\n    text-align: center;\n    @include mixins.textShadow(#fff, 1);\n  }\n  .sub_title {\n    @extend .title; // .titleのスタイル継承（includeの内容も継承）\n    font-size: 1.2rem;\n  }\n}\n\n.g_navi {\n  height: map.get(variables.$gnavi, height); // 変数を使用する際に名前空間を指定\n  // height: variables.$GNaviHeight; // 変数を使用する際に名前空間を指定\n  width: 100%;\n  border-bottom: 1px solid #eee;\n  ul {\n    width: map.get(variables.$gnavi, buttonWidth) * 4; // 150px*4個\n    // width: variables.$GNaviButtonWidth * 4; // 150px*4個\n    margin: 0 auto;\n    overflow: hidden; //floatへの対応\n    li {\n      width: map.get(variables.$gnavi, buttonWidth);\n      height: map.get(variables.$gnavi, height);\n      float: left;\n      text-align: center;\n      a {\n        display: block;\n        line-height: map.get(variables.$gnavi, height);\n        &:hover {\n          // 親セレクタ\n          background: rgba(#000, 0.1);\n        }\n      }\n    }\n  }\n}\n\n.contents {\n  width: map.get(variables.$width, contents); //variablesファイルに定義された$widthマップ、のcontentsキーの中身を取得\n  margin: 0 auto;\n  overflow: hidden;\n\n  .main_area {\n    width: map.get(variables.$width, contents) - map.get(variables.$width, sideArea) - map.get(variables.$padding, area) * 2;\n    float: left;\n    padding: map.get(variables.$padding, area);\n  }\n  .side_area {\n    width: map.get(variables.$width, sideArea) - map.get(variables.$padding, area) * 2; // pdの左右の幅を引く\n    float: right;\n    padding: map.get(variables.$padding, area);\n  }\n  %side_area_box {\n    // css出力時には残さない継承元\n    border: 1px solid #eee;\n    border-radius: 5px;\n    padding: 10px;\n    h3 {\n      margin-bottom: 5px;\n    }\n  }\n  .search_area {\n    @extend %side_area_box; //side_area_boxのスタイル継承\n    margin-bottom: 20px;\n\n    input[type='text'] {\n      padding: 3px 5px;\n      border: 1px solid #ddd;\n      border-radius: 3px;\n      font-size: 0.9rem;\n    }\n\n    button {\n      border: 1px solid #ddd;\n      border-radius: 3px;\n      padding: 3px 10px;\n    }\n  }\n  .category_area {\n    @extend %side_area_box; //side_area_boxのスタイル継承\n\n    li {\n      & + li {\n        border-top: 1px solid #eee;\n      }\n\n      a {\n        display: block;\n        padding: 3px;\n\n        &:hover {\n          background: rgba(#000, 0.1);\n        }\n      }\n      @include mixins.linkArrow;\n    }\n  }\n}\n\n.footer {\n  padding: 20px;\n  width: 100%;\n  text-align: center;\n}\n","/* TOPページ専用css */\n@use 'mixins'; // 使用するミックスインを読み込み\n@use 'base'; // 基本スタイルは共通\n\n// 全てID=TOPの中身に適用する\n// 統合ファイル側でのimportが廃止されるため\n#top .main_area {\n  // 対象：body>div.contents>main.main_area\n  section {\n    margin-bottom: 30px;\n    overflow: hidden; // 要素からはみ出したコンテンツを隠す\n    @include mixins.clearfix; // float要素と分離\n\n    h3 {\n      font-size: 1.5rem;\n      margin-bottom: 20px;\n    }\n\n    p {\n      margin-bottom: 20px;\n    }\n\n    li {\n      list-style: disc;\n      margin-left: 20px;\n    }\n\n    .thumb_img {\n      margin: 0 20px 20px 0;\n      float: left;\n    }\n    .left_thumb_para {\n      margin-left: 170px;\n    }\n    .read_more {\n      border: 1px solid #ccc;\n      border-radius: 3px;\n      background: #f2f2f2;\n      float: right;\n      padding: 5px 10px;\n      text-align: right;\n      @include mixins.linkArrow('left', #333);\n    }\n  }\n}\n","/* ユーティリティ機能専用パーシャル */\n\n$end: 5;\n$step: 10;\n\n// margin, paddingをそれぞれ使用不使用を選択可能にする\n$useMargin: true;\n$usePadding: false;\n\n/* #{$step}px毎の上下余白・（0px～#{$end * $step}px）↓ */\n// step pxごとのmargin-top調整クラスを作成\n//  start~endまでループ\n@for $i from 0 through $end {\n  // marginを書き出すか否か\n  @if ($useMargin) {\n    .mt#{$i * $step} {\n      margin-top: $i * $step * 1px; // 単位設定用1px\n    }\n    .mb#{$i * $step} {\n      margin-bottom: $i * $step * 1px; // 単位設定用1px\n    }\n  }\n  // paddingを書き出すか否か\n  @if ($usePadding) {\n    .pt#{$i * $step} {\n      padding-top: $i * $step * 1px; // 単位設定用1px\n    }\n    .pb#{$i * $step} {\n      padding-bottom: $i * $step * 1px; // 単位設定用1px\n    }\n  }\n}\n/* #{$step}px毎の上下余白・（0px～#{$end * $step}px）↑ */\n"],"file":"style.css"}